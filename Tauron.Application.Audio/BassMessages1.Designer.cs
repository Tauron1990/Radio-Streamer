//------------------------------------------------------------------------------
// <auto-generated>
//     Dieser Code wurde von einem Tool generiert.
//     Laufzeitversion:4.0.30319.34014
//
//     Änderungen an dieser Datei können falsches Verhalten verursachen und gehen verloren, wenn
//     der Code erneut generiert wird.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Tauron.Application.BassLib {
    using System;
    
    
    /// <summary>
    ///   Eine stark typisierte Ressourcenklasse zum Suchen von lokalisierten Zeichenfolgen usw.
    /// </summary>
    // Diese Klasse wurde von der StronglyTypedResourceBuilder automatisch generiert
    // -Klasse über ein Tool wie ResGen oder Visual Studio automatisch generiert.
    // Um einen Member hinzuzufügen oder zu entfernen, bearbeiten Sie die .ResX-Datei und führen dann ResGen
    // mit der /str-Option erneut aus, oder Sie erstellen Ihr VS-Projekt neu.
    [global::System.CodeDom.Compiler.GeneratedCodeAttribute("System.Resources.Tools.StronglyTypedResourceBuilder", "4.0.0.0")]
    [global::System.Diagnostics.DebuggerNonUserCodeAttribute()]
    [global::System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    internal class BassMessages {
        
        private static global::System.Resources.ResourceManager resourceMan;
        
        private static global::System.Globalization.CultureInfo resourceCulture;
        
        [global::System.Diagnostics.CodeAnalysis.SuppressMessageAttribute("Microsoft.Performance", "CA1811:AvoidUncalledPrivateCode")]
        internal BassMessages() {
        }
        
        /// <summary>
        ///   Gibt die zwischengespeicherte ResourceManager-Instanz zurück, die von dieser Klasse verwendet wird.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Resources.ResourceManager ResourceManager {
            get {
                if (object.ReferenceEquals(resourceMan, null)) {
                    global::System.Resources.ResourceManager temp = new global::System.Resources.ResourceManager("Tauron.Application.BassLib.BassMessages", typeof(BassMessages).Assembly);
                    resourceMan = temp;
                }
                return resourceMan;
            }
        }
        
        /// <summary>
        ///   Überschreibt die CurrentUICulture-Eigenschaft des aktuellen Threads für alle
        ///   Ressourcenzuordnungen, die diese stark typisierte Ressourcenklasse verwenden.
        /// </summary>
        [global::System.ComponentModel.EditorBrowsableAttribute(global::System.ComponentModel.EditorBrowsableState.Advanced)]
        internal static global::System.Globalization.CultureInfo Culture {
            get {
                return resourceCulture;
            }
            set {
                resourceCulture = value;
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassEnc: ACM codec selection cancelled ähnelt.
        /// </summary>
        internal static string BASS_ERROR_ACM_CANCEL {
            get {
                return ResourceManager.GetString("BASS_ERROR_ACM_CANCEL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Already initialized/paused/whatever ähnelt.
        /// </summary>
        internal static string BASS_ERROR_ALREADY {
            get {
                return ResourceManager.GetString("BASS_ERROR_ALREADY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The sample buffer was lost ähnelt.
        /// </summary>
        internal static string BASS_ERROR_BUFLOST {
            get {
                return ResourceManager.GetString("BASS_ERROR_BUFLOST", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The device is busy (eg. in &quot;exclusive&quot; use by another process) ähnelt.
        /// </summary>
        internal static string BASS_ERROR_BUSY {
            get {
                return ResourceManager.GetString("BASS_ERROR_BUSY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassEnc: Access denied (invalid password) ähnelt.
        /// </summary>
        internal static string BASS_ERROR_CAST_DENIED {
            get {
                return ResourceManager.GetString("BASS_ERROR_CAST_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid track number ähnelt.
        /// </summary>
        internal static string BASS_ERROR_CDTRACK {
            get {
                return ResourceManager.GetString("BASS_ERROR_CDTRACK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Codec is not available/supported ähnelt.
        /// </summary>
        internal static string BASS_ERROR_CODEC {
            get {
                return ResourceManager.GetString("BASS_ERROR_CODEC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Couldn&apos;t create the file ähnelt.
        /// </summary>
        internal static string BASS_ERROR_CREATE {
            get {
                return ResourceManager.GetString("BASS_ERROR_CREATE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The channel is a &apos;decoding channel&apos; or Not ähnelt.
        /// </summary>
        internal static string BASS_ERROR_DECODE {
            get {
                return ResourceManager.GetString("BASS_ERROR_DECODE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASS_ERROR_DEVICE ähnelt.
        /// </summary>
        internal static string BASS_ERROR_DEVICE {
            get {
                return ResourceManager.GetString("BASS_ERROR_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t find a free/valid driver ähnelt.
        /// </summary>
        internal static string BASS_ERROR_DRIVER {
            get {
                return ResourceManager.GetString("BASS_ERROR_DRIVER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die A sufficient DirectX version is not installed ähnelt.
        /// </summary>
        internal static string BASS_ERROR_DX {
            get {
                return ResourceManager.GetString("BASS_ERROR_DX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The MOD music has no sequence data ähnelt.
        /// </summary>
        internal static string BASS_ERROR_EMPTY {
            get {
                return ResourceManager.GetString("BASS_ERROR_EMPTY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The channel/file has ended ähnelt.
        /// </summary>
        internal static string BASS_ERROR_ENDED {
            get {
                return ResourceManager.GetString("BASS_ERROR_ENDED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unsupported file format ähnelt.
        /// </summary>
        internal static string BASS_ERROR_FILEFORM {
            get {
                return ResourceManager.GetString("BASS_ERROR_FILEFORM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t open the file ähnelt.
        /// </summary>
        internal static string BASS_ERROR_FILEOPEN {
            get {
                return ResourceManager.GetString("BASS_ERROR_FILEOPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unsupported sample format ähnelt.
        /// </summary>
        internal static string BASS_ERROR_FORMAT {
            get {
                return ResourceManager.GetString("BASS_ERROR_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Illegal sample rate ähnelt.
        /// </summary>
        internal static string BASS_ERROR_FREQ {
            get {
                return ResourceManager.GetString("BASS_ERROR_FREQ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid handle ähnelt.
        /// </summary>
        internal static string BASS_ERROR_HANDLE {
            get {
                return ResourceManager.GetString("BASS_ERROR_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An illegal parameter was specified ähnelt.
        /// </summary>
        internal static string BASS_ERROR_ILLPARAM {
            get {
                return ResourceManager.GetString("BASS_ERROR_ILLPARAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die An illegal type was specified ähnelt.
        /// </summary>
        internal static string BASS_ERROR_ILLTYPE {
            get {
                return ResourceManager.GetString("BASS_ERROR_ILLTYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASS_Init has not been successfully called ähnelt.
        /// </summary>
        internal static string BASS_ERROR_INIT {
            get {
                return ResourceManager.GetString("BASS_ERROR_INIT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Memory Error ähnelt.
        /// </summary>
        internal static string BASS_ERROR_MEM {
            get {
                return ResourceManager.GetString("BASS_ERROR_MEM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No 3D support ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NO3D {
            get {
                return ResourceManager.GetString("BASS_ERROR_NO3D", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No CD in drive ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOCD {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOCD", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Can&apos;t get a free channel ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOCHAN {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOCHAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No EAX support ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOEAX {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOEAX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Effects are not available ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOFX {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOFX", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No hardware voices available ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOHW {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOHW", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No internet connection could be opened ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NONET {
            get {
                return ResourceManager.GetString("BASS_ERROR_NONET", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Not paused ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOPAUSE {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOPAUSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Not playing ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOPLAY {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOPLAY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Not an audio track ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOTAUDIO {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOTAUDIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASS_Requested data is not available ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOTAVAIL {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOTAVAIL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The stream is not a file stream ähnelt.
        /// </summary>
        internal static string BASS_ERROR_NOTFILE {
            get {
                return ResourceManager.GetString("BASS_ERROR_NOTFILE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die The channel is playing ähnelt.
        /// </summary>
        internal static string BASS_ERROR_PLAYING {
            get {
                return ResourceManager.GetString("BASS_ERROR_PLAYING", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid playback position ähnelt.
        /// </summary>
        internal static string BASS_ERROR_POSITION {
            get {
                return ResourceManager.GetString("BASS_ERROR_POSITION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unavailable speaker ähnelt.
        /// </summary>
        internal static string BASS_ERROR_SPEAKER {
            get {
                return ResourceManager.GetString("BASS_ERROR_SPEAKER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASS_Start has not been successfully called ähnelt.
        /// </summary>
        internal static string BASS_ERROR_START {
            get {
                return ResourceManager.GetString("BASS_ERROR_START", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Connection timedout ähnelt.
        /// </summary>
        internal static string BASS_ERROR_TIMEOUT {
            get {
                return ResourceManager.GetString("BASS_ERROR_TIMEOUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Some other mystery error ähnelt.
        /// </summary>
        internal static string BASS_ERROR_UNKNOWN {
            get {
                return ResourceManager.GetString("BASS_ERROR_UNKNOWN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Invalid BASS version (used by add-ons) ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VERSION {
            get {
                return ResourceManager.GetString("BASS_ERROR_VERSION", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Action was abort ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_ABORT {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_ABORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Cannot connect filter / pin. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_CANNOT_CONNECT {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_CANNOT_CONNECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Cannot read file. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_CANNOT_READ {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_CANNOT_READ", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Cannot write file. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_CANNOT_WRITE {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_CANNOT_WRITE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Failure to do. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_FAILURE {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_FAILURE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Error cause by filter. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_FILTER {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_FILTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Invalid BassVideo channel. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_INVALID_CHAN {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_INVALID_CHAN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Wrong dll. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_INVALID_DLL {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_INVALID_DLL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Invalid format. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_INVALID_FORMAT {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_INVALID_FORMAT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Invalid handle. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_INVALID_HANDLE {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_INVALID_HANDLE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Invalid parameter. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_INVALID_PARAMETER {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_INVALID_PARAMETER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: No sound. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NO_AUDIO {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NO_AUDIO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: No &quot;Video Effect&quot; detected. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NO_EFFECT {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NO_EFFECT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Failed to querry interface. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NO_INTERFACE {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NO_INTERFACE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: No renderer. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NO_RENDERER {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NO_RENDERER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: No support/Currently not supported. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NO_SUPPORT {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NO_SUPPORT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: No Video. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NO_VIDEO {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NO_VIDEO", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Not allowed. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NOT_ALLOWED {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NOT_ALLOWED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Filter/Pin had not connected. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NOT_CONNECTED {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NOT_CONNECTED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Not existing object. ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NOT_EXISTS {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NOT_EXISTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Object not found ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NOT_FOUND {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NOT_FOUND", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Graph/Filter not ready.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NOT_READY {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NOT_READY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Device is null.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_NULL_DEVICE {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_NULL_DEVICE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Cannot open.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_OPEN {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_OPEN", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Not enough memory.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_OUTOFMEMORY {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_OUTOFMEMORY", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Stream is in an unsupported format.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_PARTIAL_RENDER {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_PARTIAL_RENDER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: A Timeout occured.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_TIME_OUT {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_TIME_OUT", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Unknown file type.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_UNKNOWN_FILE_TYPE {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_UNKNOWN_FILE_TYPE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Cannot play file, format not supported.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_UNSUPPORT_STREAM {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_UNSUPPORT_STREAM", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSVIDEO: Cannot create video filter.  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_VIDEO_VIDEO_FILTER {
            get {
                return ResourceManager.GetString("BASS_ERROR_VIDEO_VIDEO_FILTER", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BASSWASAPI: no WASAPI available  ähnelt.
        /// </summary>
        internal static string BASS_ERROR_WASAPI {
            get {
                return ResourceManager.GetString("BASS_ERROR_WASAPI", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassWma: no appropriate codec is installed ähnelt.
        /// </summary>
        internal static string BASS_ERROR_WMA_CODEC {
            get {
                return ResourceManager.GetString("BASS_ERROR_WMA_CODEC", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassWma: access denied (user/pass is invalid) ähnelt.
        /// </summary>
        internal static string BASS_ERROR_WMA_DENIED {
            get {
                return ResourceManager.GetString("BASS_ERROR_WMA_DENIED", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassWma: individualization is needed ähnelt.
        /// </summary>
        internal static string BASS_ERROR_WMA_INDIVIDUAL {
            get {
                return ResourceManager.GetString("BASS_ERROR_WMA_INDIVIDUAL", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassWma: the file is protected ähnelt.
        /// </summary>
        internal static string BASS_ERROR_WMA_LICENSE {
            get {
                return ResourceManager.GetString("BASS_ERROR_WMA_LICENSE", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassWma: WM9 is required ähnelt.
        /// </summary>
        internal static string BASS_ERROR_WMA_WM9 {
            get {
                return ResourceManager.GetString("BASS_ERROR_WMA_WM9", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die No Error ähnelt.
        /// </summary>
        internal static string BASS_OK {
            get {
                return ResourceManager.GetString("BASS_OK", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassVst: the given effect has no inputs and is probably a VST instrument and no effect ähnelt.
        /// </summary>
        internal static string BASS_VST_ERROR_NOINPUTS {
            get {
                return ResourceManager.GetString("BASS_VST_ERROR_NOINPUTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassVst: the given effect has no outputs ähnelt.
        /// </summary>
        internal static string BASS_VST_ERROR_NOOUTPUTS {
            get {
                return ResourceManager.GetString("BASS_VST_ERROR_NOOUTPUTS", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die BassVst: the given effect does not support realtime processing ähnelt.
        /// </summary>
        internal static string BASS_VST_ERROR_NOREALTIME {
            get {
                return ResourceManager.GetString("BASS_VST_ERROR_NOREALTIME", resourceCulture);
            }
        }
        
        /// <summary>
        ///   Sucht eine lokalisierte Zeichenfolge, die Unkown Error ähnelt.
        /// </summary>
        internal static string ErrorUnkown {
            get {
                return ResourceManager.GetString("ErrorUnkown", resourceCulture);
            }
        }
    }
}
